        -:    0:Source:C:/Program Files/JetBrains/CLion 2024.2.1/bin/mingw/lib/gcc/x86_64-w64-mingw32/13.1.0/include/c++/bits/allocator.h
        -:    0:Graph:C:\Users\dev\Documents\MyTorch\cmake-build-debug-coverage\googletest\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\dev\Documents\MyTorch\cmake-build-debug-coverage\googletest\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Allocators -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2023 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: * Copyright (c) 1996-1997
        -:   27: * Silicon Graphics Computer Systems, Inc.
        -:   28: *
        -:   29: * Permission to use, copy, modify, distribute and sell this software
        -:   30: * and its documentation for any purpose is hereby granted without fee,
        -:   31: * provided that the above copyright notice appear in all copies and
        -:   32: * that both that copyright notice and this permission notice appear
        -:   33: * in supporting documentation.  Silicon Graphics makes no
        -:   34: * representations about the suitability of this software for any
        -:   35: * purpose.  It is provided "as is" without express or implied warranty.
        -:   36: */
        -:   37:
        -:   38:/** @file bits/allocator.h
        -:   39: *  This is an internal header file, included by other library headers.
        -:   40: *  Do not attempt to use it directly. @headername{memory}
        -:   41: */
        -:   42:
        -:   43:#ifndef _ALLOCATOR_H
        -:   44:#define _ALLOCATOR_H 1
        -:   45:
        -:   46:#include <bits/c++allocator.h> // Define the base class to std::allocator.
        -:   47:#include <bits/memoryfwd.h>
        -:   48:#if __cplusplus >= 201103L
        -:   49:#include <type_traits>
        -:   50:#endif
        -:   51:
        -:   52:#define __cpp_lib_incomplete_container_elements 201505L
        -:   53:
        -:   54:namespace std _GLIBCXX_VISIBILITY(default)
        -:   55:{
        -:   56:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   57:
        -:   58:  /**
        -:   59:   *  @addtogroup allocators
        -:   60:   *  @{
        -:   61:   */
        -:   62:
        -:   63:  // Since C++20 the primary template should be used for allocator<void>,
        -:   64:  // but then it would have a non-trivial default ctor and dtor for C++20,
        -:   65:  // but trivial for C++98-17, which would be an ABI incompatibility between
        -:   66:  // different standard dialects. So C++20 still uses the allocator<void>
        -:   67:  // explicit specialization, with the historical ABI properties, but with
        -:   68:  // the same members that are present in the primary template.
        -:   69:
        -:   70:  /** std::allocator<void> specialization.
        -:   71:   *
        -:   72:   * @headerfile memory
        -:   73:   */
        -:   74:  template<>
        -:   75:    class allocator<void>
        -:   76:    {
        -:   77:    public:
        -:   78:      typedef void        value_type;
        -:   79:      typedef size_t      size_type;
        -:   80:      typedef ptrdiff_t   difference_type;
        -:   81:
        -:   82:#if __cplusplus <= 201703L
        -:   83:      // These were removed for C++20, allocator_traits does the right thing.
        -:   84:      typedef void*       pointer;
        -:   85:      typedef const void* const_pointer;
        -:   86:
        -:   87:      template<typename _Tp1>
        -:   88:	struct rebind
        -:   89:	{ typedef allocator<_Tp1> other; };
        -:   90:#endif
        -:   91:
        -:   92:#if __cplusplus >= 201103L
        -:   93:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   94:      // 2103. std::allocator propagate_on_container_move_assignment
        -:   95:      using propagate_on_container_move_assignment = true_type;
        -:   96:
        -:   97:      using is_always_equal
        -:   98:	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        -:   99:	= true_type;
        -:  100:
        -:  101:#if __cplusplus >= 202002L
        -:  102:      // As noted above, these members are present for C++20 to provide the
        -:  103:      // same API as the primary template, but still trivial as in pre-C++20.
        -:  104:      allocator() = default;
        -:  105:      ~allocator() = default;
        -:  106:
        -:  107:      template<typename _Up>
        -:  108:	__attribute__((__always_inline__))
        -:  109:	constexpr
        -:  110:	allocator(const allocator<_Up>&) noexcept { }
        -:  111:
        -:  112:      // No allocate member because it's ill-formed by LWG 3307.
        -:  113:      // No deallocate member because it would be undefined to call it
        -:  114:      // with any pointer which wasn't obtained from allocate.
        -:  115:#endif // C++20
        -:  116:#endif // C++11
        -:  117:    };
        -:  118:
        -:  119:  /**
        -:  120:   * @brief  The @a standard allocator, as per C++03 [20.4.1].
        -:  121:   *
        -:  122:   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
        -:  123:   *  for further details.
        -:  124:   *
        -:  125:   *  @tparam  _Tp  Type of allocated object.
        -:  126:   *
        -:  127:   *  @headerfile memory
        -:  128:   */
        -:  129:  template<typename _Tp>
        -:  130:    class allocator : public __allocator_base<_Tp>
        -:  131:    {
        -:  132:    public:
        -:  133:      typedef _Tp        value_type;
        -:  134:      typedef size_t     size_type;
        -:  135:      typedef ptrdiff_t  difference_type;
        -:  136:
        -:  137:#if __cplusplus <= 201703L
        -:  138:      // These were removed for C++20.
        -:  139:      typedef _Tp*       pointer;
        -:  140:      typedef const _Tp* const_pointer;
        -:  141:      typedef _Tp&       reference;
        -:  142:      typedef const _Tp& const_reference;
        -:  143:
        -:  144:      template<typename _Tp1>
        -:  145:	struct rebind
        -:  146:	{ typedef allocator<_Tp1> other; };
        -:  147:#endif
        -:  148:
        -:  149:#if __cplusplus >= 201103L
        -:  150:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  151:      // 2103. std::allocator propagate_on_container_move_assignment
        -:  152:      using propagate_on_container_move_assignment = true_type;
        -:  153:
        -:  154:      using is_always_equal
        -:  155:	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        -:  156:	= true_type;
        -:  157:#endif
        -:  158:
        -:  159:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  160:      // 3035. std::allocator's constructors should be constexpr
        -:  161:      __attribute__((__always_inline__))
        -:  162:      _GLIBCXX20_CONSTEXPR
      94*:  163:      allocator() _GLIBCXX_NOTHROW { }
    %%%%%:  163-block  0
    %%%%%:  163-block  1
    %%%%%:  163-block  2
       10:  163-block  3
        1:  163-block  4
        1:  163-block  5
        1:  163-block  6
        1:  163-block  7
        1:  163-block  8
        1:  163-block  9
        1:  163-block 10
        2:  163-block 11
        1:  163-block 12
    %%%%%:  163-block 13
    %%%%%:  163-block 14
       18:  163-block 15
       18:  163-block 16
    %%%%%:  163-block 17
    %%%%%:  163-block 18
        5:  163-block 19
    %%%%%:  163-block 20
    %%%%%:  163-block 21
    %%%%%:  163-block 22
    %%%%%:  163-block 23
        1:  163-block 24
    %%%%%:  163-block 25
    %%%%%:  163-block 26
    %%%%%:  163-block 27
    %%%%%:  163-block 28
    %%%%%:  163-block 29
    %%%%%:  163-block 30
        4:  163-block 31
        1:  163-block 32
    %%%%%:  163-block 33
        1:  163-block 34
        1:  163-block 35
    %%%%%:  163-block 36
    %%%%%:  163-block 37
    %%%%%:  163-block 38
    %%%%%:  163-block 39
    %%%%%:  163-block 40
    %%%%%:  163-block 41
    %%%%%:  163-block 42
    %%%%%:  163-block 43
    %%%%%:  163-block 44
    %%%%%:  163-block 45
    %%%%%:  163-block 46
    %%%%%:  163-block 47
    %%%%%:  163-block 48
    %%%%%:  163-block 49
    %%%%%:  163-block 50
    %%%%%:  163-block 51
    %%%%%:  163-block 52
    %%%%%:  163-block 53
    %%%%%:  163-block 54
    %%%%%:  163-block 55
    %%%%%:  163-block 56
    %%%%%:  163-block 57
    %%%%%:  163-block 58
    %%%%%:  163-block 59
    %%%%%:  163-block 60
    %%%%%:  163-block 61
    %%%%%:  163-block 62
    %%%%%:  163-block 63
    %%%%%:  163-block 64
    %%%%%:  163-block 65
    %%%%%:  163-block 66
    %%%%%:  163-block 67
    %%%%%:  163-block 68
    %%%%%:  163-block 69
    %%%%%:  163-block 70
    %%%%%:  163-block 71
    %%%%%:  163-block 72
    %%%%%:  163-block 73
    %%%%%:  163-block 74
    %%%%%:  163-block 75
    %%%%%:  163-block 76
    %%%%%:  163-block 77
    %%%%%:  163-block 78
    %%%%%:  163-block 79
    %%%%%:  163-block 80
    %%%%%:  163-block 81
    %%%%%:  163-block 82
    %%%%%:  163-block 83
    %%%%%:  163-block 84
    %%%%%:  163-block 85
    %%%%%:  163-block 86
    %%%%%:  163-block 87
    %%%%%:  163-block 88
    %%%%%:  163-block 89
    %%%%%:  163-block 90
    %%%%%:  163-block 91
    %%%%%:  163-block 92
    %%%%%:  163-block 93
    %%%%%:  163-block 94
    %%%%%:  163-block 95
    %%%%%:  163-block 96
    %%%%%:  163-block 97
    %%%%%:  163-block 98
    %%%%%:  163-block 99
    %%%%%:  163-block 100
    %%%%%:  163-block 101
    %%%%%:  163-block 102
    %%%%%:  163-block 103
    %%%%%:  163-block 104
    %%%%%:  163-block 105
    %%%%%:  163-block 106
    %%%%%:  163-block 107
    %%%%%:  163-block 108
    %%%%%:  163-block 109
    %%%%%:  163-block 110
    %%%%%:  163-block 111
    %%%%%:  163-block 112
    %%%%%:  163-block 113
    %%%%%:  163-block 114
    %%%%%:  163-block 115
    %%%%%:  163-block 116
    %%%%%:  163-block 117
    %%%%%:  163-block 118
    %%%%%:  163-block 119
    %%%%%:  163-block 120
    %%%%%:  163-block 121
    %%%%%:  163-block 122
    %%%%%:  163-block 123
    %%%%%:  163-block 124
    %%%%%:  163-block 125
    %%%%%:  163-block 126
    %%%%%:  163-block 127
    %%%%%:  163-block 128
    %%%%%:  163-block 129
    %%%%%:  163-block 130
    %%%%%:  163-block 131
    %%%%%:  163-block 132
    %%%%%:  163-block 133
    %%%%%:  163-block 134
    %%%%%:  163-block 135
    %%%%%:  163-block 136
    %%%%%:  163-block 137
    %%%%%:  163-block 138
    %%%%%:  163-block 139
    %%%%%:  163-block 140
    %%%%%:  163-block 141
    %%%%%:  163-block 142
    %%%%%:  163-block 143
    %%%%%:  163-block 144
    %%%%%:  163-block 145
    %%%%%:  163-block 146
    %%%%%:  163-block 147
    %%%%%:  163-block 148
    %%%%%:  163-block 149
    %%%%%:  163-block 150
    %%%%%:  163-block 151
    %%%%%:  163-block 152
    %%%%%:  163-block 153
    %%%%%:  163-block 154
    %%%%%:  163-block 155
    %%%%%:  163-block 156
    %%%%%:  163-block 157
    %%%%%:  163-block 158
    %%%%%:  163-block 159
    %%%%%:  163-block 160
    %%%%%:  163-block 161
    %%%%%:  163-block 162
    %%%%%:  163-block 163
    %%%%%:  163-block 164
    %%%%%:  163-block 165
    %%%%%:  163-block 166
    %%%%%:  163-block 167
    %%%%%:  163-block 168
    %%%%%:  163-block 169
    %%%%%:  163-block 170
    %%%%%:  163-block 171
    %%%%%:  163-block 172
    %%%%%:  163-block 173
    %%%%%:  163-block 174
    %%%%%:  163-block 175
    %%%%%:  163-block 176
    %%%%%:  163-block 177
    %%%%%:  163-block 178
    %%%%%:  163-block 179
    %%%%%:  163-block 180
    %%%%%:  163-block 181
    %%%%%:  163-block 182
    %%%%%:  163-block 183
    %%%%%:  163-block 184
    %%%%%:  163-block 185
    %%%%%:  163-block 186
    %%%%%:  163-block 187
    %%%%%:  163-block 188
    %%%%%:  163-block 189
    %%%%%:  163-block 190
    %%%%%:  163-block 191
    %%%%%:  163-block 192
    %%%%%:  163-block 193
    %%%%%:  163-block 194
    %%%%%:  163-block 195
    %%%%%:  163-block 196
    %%%%%:  163-block 197
    %%%%%:  163-block 198
    %%%%%:  163-block 199
    %%%%%:  163-block 200
    %%%%%:  163-block 201
    %%%%%:  163-block 202
    %%%%%:  163-block 203
    %%%%%:  163-block 204
    %%%%%:  163-block 205
    %%%%%:  163-block 206
    %%%%%:  163-block 207
       16:  163-block 208
    %%%%%:  163-block 209
    %%%%%:  163-block 210
    %%%%%:  163-block 211
    %%%%%:  163-block 212
    %%%%%:  163-block 213
    %%%%%:  163-block 214
    %%%%%:  163-block 215
    %%%%%:  163-block 216
    %%%%%:  163-block 217
    %%%%%:  163-block 218
    %%%%%:  163-block 219
    %%%%%:  163-block 220
    %%%%%:  163-block 221
    %%%%%:  163-block 222
    %%%%%:  163-block 223
    %%%%%:  163-block 224
    %%%%%:  163-block 225
    %%%%%:  163-block 226
    %%%%%:  163-block 227
    %%%%%:  163-block 228
    %%%%%:  163-block 229
        1:  163-block 230
    %%%%%:  163-block 231
    %%%%%:  163-block 232
    %%%%%:  163-block 233
    %%%%%:  163-block 234
    %%%%%:  163-block 235
    %%%%%:  163-block 236
    %%%%%:  163-block 237
    %%%%%:  163-block 238
        1:  163-block 239
    %%%%%:  163-block 240
    %%%%%:  163-block 241
    %%%%%:  163-block 242
    %%%%%:  163-block 243
    %%%%%:  163-block 244
    %%%%%:  163-block 245
    %%%%%:  163-block 246
    %%%%%:  163-block 247
    %%%%%:  163-block 248
    %%%%%:  163-block 249
    %%%%%:  163-block 250
    %%%%%:  163-block 251
    %%%%%:  163-block 252
    %%%%%:  163-block 253
        1:  163-block 254
        5:  163-block 255
    %%%%%:  163-block 256
    %%%%%:  163-block 257
    %%%%%:  163-block 258
    %%%%%:  163-block 259
    %%%%%:  163-block 260
    %%%%%:  163-block 261
    %%%%%:  163-block 262
    %%%%%:  163-block 263
    %%%%%:  163-block 264
    %%%%%:  163-block 265
    %%%%%:  163-block 266
    %%%%%:  163-block 267
    %%%%%:  163-block 268
    %%%%%:  163-block 269
    %%%%%:  163-block 270
    %%%%%:  163-block 271
    %%%%%:  163-block 272
    %%%%%:  163-block 273
    %%%%%:  163-block 274
    %%%%%:  163-block 275
    %%%%%:  163-block 276
    %%%%%:  163-block 277
    %%%%%:  163-block 278
    %%%%%:  163-block 279
        1:  163-block 280
        -:  164:
        -:  165:      __attribute__((__always_inline__))
        -:  166:      _GLIBCXX20_CONSTEXPR
        -:  167:      allocator(const allocator& __a) _GLIBCXX_NOTHROW
      38*:  168:      : __allocator_base<_Tp>(__a) { }
    %%%%%:  168-block  0
    %%%%%:  168-block  1
    %%%%%:  168-block  2
    %%%%%:  168-block  3
    %%%%%:  168-block  4
    %%%%%:  168-block  5
        1:  168-block  6
    %%%%%:  168-block  7
        3:  168-block  8
    %%%%%:  168-block  9
    %%%%%:  168-block 10
    %%%%%:  168-block 11
    %%%%%:  168-block 12
    %%%%%:  168-block 13
    %%%%%:  168-block 14
       16:  168-block 15
       16:  168-block 16
    %%%%%:  168-block 17
        2:  168-block 18
    %%%%%:  168-block 19
    %%%%%:  168-block 20
    %%%%%:  168-block 21
        -:  169:
        -:  170:#if __cplusplus >= 201103L
        -:  171:      // Avoid implicit deprecation.
        -:  172:      allocator& operator=(const allocator&) = default;
        -:  173:#endif
        -:  174:
        -:  175:      template<typename _Tp1>
        -:  176:	__attribute__((__always_inline__))
        -:  177:	_GLIBCXX20_CONSTEXPR
       1*:  178:	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
    %%%%%:  178-block  0
        1:  178-block  1
    %%%%%:  178-block  2
    %%%%%:  178-block  3
    %%%%%:  178-block  4
        -:  179:
        -:  180:      __attribute__((__always_inline__))
        -:  181:#if __cpp_constexpr_dynamic_alloc
        -:  182:      constexpr
        -:  183:#endif
      73*:  184:      ~allocator() _GLIBCXX_NOTHROW { }
    $$$$$:  184-block  0
    $$$$$:  184-block  1
    %%%%%:  184-block  2
    $$$$$:  184-block  3
    %%%%%:  184-block  4
    $$$$$:  184-block  5
    %%%%%:  184-block  6
    $$$$$:  184-block  7
    %%%%%:  184-block  8
    $$$$$:  184-block  9
    %%%%%:  184-block 10
    %%%%%:  184-block 11
    %%%%%:  184-block 12
    %%%%%:  184-block 13
    $$$$$:  184-block 14
    %%%%%:  184-block 15
    $$$$$:  184-block 16
    %%%%%:  184-block 17
    $$$$$:  184-block 18
    $$$$$:  184-block 19
    $$$$$:  184-block 20
    $$$$$:  184-block 21
    $$$$$:  184-block 22
        2:  184-block 23
    $$$$$:  184-block 24
    %%%%%:  184-block 25
    $$$$$:  184-block 26
    %%%%%:  184-block 27
    $$$$$:  184-block 28
       16:  184-block 29
    $$$$$:  184-block 30
    %%%%%:  184-block 31
    %%%%%:  184-block 32
    $$$$$:  184-block 33
    $$$$$:  184-block 34
    $$$$$:  184-block 35
    $$$$$:  184-block 36
    $$$$$:  184-block 37
    $$$$$:  184-block 38
    %%%%%:  184-block 39
    $$$$$:  184-block 40
    $$$$$:  184-block 41
        1:  184-block 42
    $$$$$:  184-block 43
    %%%%%:  184-block 44
    $$$$$:  184-block 45
    $$$$$:  184-block 46
    %%%%%:  184-block 47
    $$$$$:  184-block 48
    $$$$$:  184-block 49
    $$$$$:  184-block 50
    $$$$$:  184-block 51
    %%%%%:  184-block 52
    $$$$$:  184-block 53
    $$$$$:  184-block 54
    $$$$$:  184-block 55
    $$$$$:  184-block 56
    $$$$$:  184-block 57
    $$$$$:  184-block 58
    $$$$$:  184-block 59
    $$$$$:  184-block 60
    $$$$$:  184-block 61
    $$$$$:  184-block 62
    %%%%%:  184-block 63
    $$$$$:  184-block 64
    $$$$$:  184-block 65
    $$$$$:  184-block 66
    $$$$$:  184-block 67
    $$$$$:  184-block 68
    $$$$$:  184-block 69
    $$$$$:  184-block 70
    $$$$$:  184-block 71
    $$$$$:  184-block 72
    %%%%%:  184-block 73
    $$$$$:  184-block 74
    $$$$$:  184-block 75
    $$$$$:  184-block 76
    $$$$$:  184-block 77
    $$$$$:  184-block 78
    $$$$$:  184-block 79
    $$$$$:  184-block 80
    $$$$$:  184-block 81
    $$$$$:  184-block 82
    $$$$$:  184-block 83
    $$$$$:  184-block 84
    $$$$$:  184-block 85
    $$$$$:  184-block 86
    $$$$$:  184-block 87
    $$$$$:  184-block 88
    $$$$$:  184-block 89
    $$$$$:  184-block 90
    $$$$$:  184-block 91
    $$$$$:  184-block 92
    $$$$$:  184-block 93
    $$$$$:  184-block 94
    $$$$$:  184-block 95
    $$$$$:  184-block 96
    $$$$$:  184-block 97
    $$$$$:  184-block 98
    $$$$$:  184-block 99
    $$$$$:  184-block 100
    $$$$$:  184-block 101
    $$$$$:  184-block 102
    $$$$$:  184-block 103
    $$$$$:  184-block 104
    $$$$$:  184-block 105
    $$$$$:  184-block 106
    $$$$$:  184-block 107
    $$$$$:  184-block 108
    $$$$$:  184-block 109
    $$$$$:  184-block 110
    $$$$$:  184-block 111
    $$$$$:  184-block 112
    $$$$$:  184-block 113
    $$$$$:  184-block 114
    $$$$$:  184-block 115
    $$$$$:  184-block 116
    $$$$$:  184-block 117
    $$$$$:  184-block 118
    $$$$$:  184-block 119
    $$$$$:  184-block 120
    $$$$$:  184-block 121
    $$$$$:  184-block 122
    $$$$$:  184-block 123
    $$$$$:  184-block 124
    %%%%%:  184-block 125
    $$$$$:  184-block 126
    %%%%%:  184-block 127
    $$$$$:  184-block 128
    %%%%%:  184-block 129
    $$$$$:  184-block 130
    %%%%%:  184-block 131
    %%%%%:  184-block 132
    $$$$$:  184-block 133
    $$$$$:  184-block 134
    $$$$$:  184-block 135
    $$$$$:  184-block 136
    $$$$$:  184-block 137
    %%%%%:  184-block 138
    $$$$$:  184-block 139
    $$$$$:  184-block 140
    $$$$$:  184-block 141
    $$$$$:  184-block 142
    %%%%%:  184-block 143
    $$$$$:  184-block 144
    $$$$$:  184-block 145
    $$$$$:  184-block 146
    $$$$$:  184-block 147
    $$$$$:  184-block 148
    $$$$$:  184-block 149
    $$$$$:  184-block 150
    $$$$$:  184-block 151
    $$$$$:  184-block 152
    $$$$$:  184-block 153
    $$$$$:  184-block 154
    %%%%%:  184-block 155
    $$$$$:  184-block 156
    $$$$$:  184-block 157
    $$$$$:  184-block 158
    $$$$$:  184-block 159
    $$$$$:  184-block 160
    $$$$$:  184-block 161
    $$$$$:  184-block 162
    $$$$$:  184-block 163
    $$$$$:  184-block 164
    $$$$$:  184-block 165
    $$$$$:  184-block 166
    $$$$$:  184-block 167
    %%%%%:  184-block 168
    $$$$$:  184-block 169
    $$$$$:  184-block 170
    $$$$$:  184-block 171
    $$$$$:  184-block 172
    $$$$$:  184-block 173
    $$$$$:  184-block 174
    $$$$$:  184-block 175
    $$$$$:  184-block 176
    $$$$$:  184-block 177
    $$$$$:  184-block 178
    $$$$$:  184-block 179
    $$$$$:  184-block 180
    $$$$$:  184-block 181
    $$$$$:  184-block 182
    $$$$$:  184-block 183
    $$$$$:  184-block 184
    $$$$$:  184-block 185
    $$$$$:  184-block 186
    $$$$$:  184-block 187
    $$$$$:  184-block 188
    $$$$$:  184-block 189
    $$$$$:  184-block 190
    $$$$$:  184-block 191
    $$$$$:  184-block 192
    $$$$$:  184-block 193
    $$$$$:  184-block 194
    $$$$$:  184-block 195
    $$$$$:  184-block 196
    $$$$$:  184-block 197
    $$$$$:  184-block 198
    $$$$$:  184-block 199
    $$$$$:  184-block 200
    $$$$$:  184-block 201
    $$$$$:  184-block 202
    $$$$$:  184-block 203
    $$$$$:  184-block 204
    $$$$$:  184-block 205
    $$$$$:  184-block 206
    $$$$$:  184-block 207
    $$$$$:  184-block 208
    $$$$$:  184-block 209
    $$$$$:  184-block 210
    $$$$$:  184-block 211
    $$$$$:  184-block 212
    $$$$$:  184-block 213
    $$$$$:  184-block 214
    $$$$$:  184-block 215
    $$$$$:  184-block 216
    $$$$$:  184-block 217
    $$$$$:  184-block 218
    $$$$$:  184-block 219
    $$$$$:  184-block 220
    $$$$$:  184-block 221
    $$$$$:  184-block 222
    $$$$$:  184-block 223
    $$$$$:  184-block 224
    %%%%%:  184-block 225
    $$$$$:  184-block 226
    %%%%%:  184-block 227
    $$$$$:  184-block 228
    %%%%%:  184-block 229
    %%%%%:  184-block 230
    $$$$$:  184-block 231
    $$$$$:  184-block 232
    %%%%%:  184-block 233
    $$$$$:  184-block 234
    $$$$$:  184-block 235
    %%%%%:  184-block 236
    %%%%%:  184-block 237
    $$$$$:  184-block 238
    $$$$$:  184-block 239
    $$$$$:  184-block 240
    $$$$$:  184-block 241
    $$$$$:  184-block 242
    $$$$$:  184-block 243
    %%%%%:  184-block 244
    $$$$$:  184-block 245
    %%%%%:  184-block 246
    $$$$$:  184-block 247
    %%%%%:  184-block 248
    %%%%%:  184-block 249
    $$$$$:  184-block 250
    $$$$$:  184-block 251
    $$$$$:  184-block 252
    $$$$$:  184-block 253
    %%%%%:  184-block 254
    $$$$$:  184-block 255
    $$$$$:  184-block 256
    %%%%%:  184-block 257
    $$$$$:  184-block 258
    $$$$$:  184-block 259
    $$$$$:  184-block 260
    $$$$$:  184-block 261
    $$$$$:  184-block 262
    $$$$$:  184-block 263
    $$$$$:  184-block 264
    %%%%%:  184-block 265
        1:  184-block 266
    $$$$$:  184-block 267
    $$$$$:  184-block 268
    $$$$$:  184-block 269
    $$$$$:  184-block 270
    $$$$$:  184-block 271
    %%%%%:  184-block 272
    $$$$$:  184-block 273
    $$$$$:  184-block 274
    %%%%%:  184-block 275
    %%%%%:  184-block 276
    $$$$$:  184-block 277
    $$$$$:  184-block 278
        1:  184-block 279
    $$$$$:  184-block 280
    $$$$$:  184-block 281
    $$$$$:  184-block 282
    %%%%%:  184-block 283
    $$$$$:  184-block 284
    %%%%%:  184-block 285
    $$$$$:  184-block 286
    %%%%%:  184-block 287
    $$$$$:  184-block 288
    $$$$$:  184-block 289
    $$$$$:  184-block 290
    $$$$$:  184-block 291
    $$$$$:  184-block 292
    $$$$$:  184-block 293
    $$$$$:  184-block 294
    $$$$$:  184-block 295
    %%%%%:  184-block 296
    $$$$$:  184-block 297
    $$$$$:  184-block 298
    $$$$$:  184-block 299
    $$$$$:  184-block 300
    $$$$$:  184-block 301
    $$$$$:  184-block 302
    $$$$$:  184-block 303
    $$$$$:  184-block 304
    $$$$$:  184-block 305
    $$$$$:  184-block 306
    $$$$$:  184-block 307
    $$$$$:  184-block 308
    $$$$$:  184-block 309
    $$$$$:  184-block 310
    $$$$$:  184-block 311
    $$$$$:  184-block 312
    $$$$$:  184-block 313
    %%%%%:  184-block 314
    $$$$$:  184-block 315
    %%%%%:  184-block 316
    $$$$$:  184-block 317
    %%%%%:  184-block 318
    %%%%%:  184-block 319
    $$$$$:  184-block 320
    $$$$$:  184-block 321
    $$$$$:  184-block 322
    $$$$$:  184-block 323
    %%%%%:  184-block 324
    %%%%%:  184-block 325
    $$$$$:  184-block 326
    $$$$$:  184-block 327
        1:  184-block 328
    $$$$$:  184-block 329
        -:  185:
        -:  186:#if __cplusplus > 201703L
        -:  187:      [[nodiscard,__gnu__::__always_inline__]]
        -:  188:      constexpr _Tp*
        -:  189:      allocate(size_t __n)
        -:  190:      {
      30*:  191:	if (std::__is_constant_evaluated())
    %%%%%:  191-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
        1:  191-block  1
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed
call   12 returned 1
branch 13 taken 0 (fallthrough)
branch 14 taken 1
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed
        6:  191-block  2
call   27 returned 6
branch 28 taken 0 (fallthrough)
branch 29 taken 6
    %%%%%:  191-block  3
call   30 never executed
branch 31 never executed (fallthrough)
branch 32 never executed
    %%%%%:  191-block  4
call   33 never executed
branch 34 never executed (fallthrough)
branch 35 never executed
    %%%%%:  191-block  5
call   36 never executed
branch 37 never executed (fallthrough)
branch 38 never executed
    %%%%%:  191-block  6
call   39 never executed
branch 40 never executed (fallthrough)
branch 41 never executed
    %%%%%:  191-block  7
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed
        1:  191-block  8
call   45 returned 1
branch 46 taken 0 (fallthrough)
branch 47 taken 1
    %%%%%:  191-block  9
call   48 never executed
branch 49 never executed (fallthrough)
branch 50 never executed
    %%%%%:  191-block 10
call   51 never executed
branch 52 never executed (fallthrough)
branch 53 never executed
        1:  191-block 11
call   54 returned 1
branch 55 taken 0 (fallthrough)
branch 56 taken 1
        5:  191-block 12
call   57 returned 5
branch 58 taken 0 (fallthrough)
branch 59 taken 5
    %%%%%:  191-block 13
call   60 never executed
branch 61 never executed (fallthrough)
branch 62 never executed
    %%%%%:  191-block 14
call   63 never executed
branch 64 never executed (fallthrough)
branch 65 never executed
    %%%%%:  191-block 15
call   66 never executed
branch 67 never executed (fallthrough)
branch 68 never executed
    %%%%%:  191-block 16
call   69 never executed
branch 70 never executed (fallthrough)
branch 71 never executed
call   72 never executed
branch 73 never executed (fallthrough)
branch 74 never executed
call   75 never executed
branch 76 never executed (fallthrough)
branch 77 never executed
       15:  191-block 17
call   78 returned 15
branch 79 taken 0 (fallthrough)
branch 80 taken 15
    %%%%%:  191-block 18
call   81 never executed
branch 82 never executed (fallthrough)
branch 83 never executed
call   84 never executed
branch 85 never executed (fallthrough)
branch 86 never executed
        -:  192:	  {
    #####:  193:	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
    %%%%%:  193-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  193-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  193-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  193-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  193-block  4
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%:  193-block  5
branch 10 never executed (fallthrough)
branch 11 never executed
    %%%%%:  193-block  6
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%:  193-block  7
branch 14 never executed (fallthrough)
branch 15 never executed
    %%%%%:  193-block  8
branch 16 never executed (fallthrough)
branch 17 never executed
    %%%%%:  193-block  9
branch 18 never executed (fallthrough)
branch 19 never executed
    %%%%%:  193-block 10
branch 20 never executed (fallthrough)
branch 21 never executed
    %%%%%:  193-block 11
branch 22 never executed (fallthrough)
branch 23 never executed
    %%%%%:  193-block 12
branch 24 never executed (fallthrough)
branch 25 never executed
    %%%%%:  193-block 13
branch 26 never executed (fallthrough)
branch 27 never executed
    %%%%%:  193-block 14
branch 28 never executed (fallthrough)
branch 29 never executed
    %%%%%:  193-block 15
branch 30 never executed (fallthrough)
branch 31 never executed
    %%%%%:  193-block 16
branch 32 never executed (fallthrough)
branch 33 never executed
    %%%%%:  193-block 17
branch 34 never executed (fallthrough)
branch 35 never executed
    %%%%%:  193-block 18
branch 36 never executed (fallthrough)
branch 37 never executed
    %%%%%:  193-block 19
branch 38 never executed (fallthrough)
branch 39 never executed
    %%%%%:  193-block 20
branch 40 never executed (fallthrough)
branch 41 never executed
    %%%%%:  193-block 21
branch 42 never executed (fallthrough)
branch 43 never executed
    %%%%%:  193-block 22
branch 44 never executed (fallthrough)
branch 45 never executed
    %%%%%:  193-block 23
branch 46 never executed (fallthrough)
branch 47 never executed
    %%%%%:  193-block 24
branch 48 never executed (fallthrough)
branch 49 never executed
    %%%%%:  193-block 25
branch 50 never executed (fallthrough)
branch 51 never executed
    %%%%%:  193-block 26
branch 52 never executed (fallthrough)
branch 53 never executed
    %%%%%:  193-block 27
branch 54 never executed (fallthrough)
branch 55 never executed
    %%%%%:  193-block 28
branch 56 never executed (fallthrough)
branch 57 never executed
    #####:  194:	      std::__throw_bad_array_new_length();
    %%%%%:  194-block  0
call    0 never executed
    %%%%%:  194-block  1
call    1 never executed
    %%%%%:  194-block  2
call    2 never executed
    %%%%%:  194-block  3
call    3 never executed
    %%%%%:  194-block  4
call    4 never executed
    %%%%%:  194-block  5
call    5 never executed
    %%%%%:  194-block  6
call    6 never executed
    %%%%%:  194-block  7
call    7 never executed
    %%%%%:  194-block  8
call    8 never executed
    %%%%%:  194-block  9
call    9 never executed
    %%%%%:  194-block 10
call   10 never executed
    %%%%%:  194-block 11
call   11 never executed
    %%%%%:  194-block 12
call   12 never executed
    %%%%%:  194-block 13
call   13 never executed
    %%%%%:  194-block 14
call   14 never executed
    %%%%%:  194-block 15
call   15 never executed
    %%%%%:  194-block 16
call   16 never executed
    %%%%%:  194-block 17
call   17 never executed
    %%%%%:  194-block 18
call   18 never executed
    %%%%%:  194-block 19
call   19 never executed
    %%%%%:  194-block 20
call   20 never executed
    %%%%%:  194-block 21
call   21 never executed
    %%%%%:  194-block 22
call   22 never executed
    %%%%%:  194-block 23
call   23 never executed
    %%%%%:  194-block 24
call   24 never executed
    %%%%%:  194-block 25
call   25 never executed
    %%%%%:  194-block 26
call   26 never executed
    %%%%%:  194-block 27
call   27 never executed
    %%%%%:  194-block 28
call   28 never executed
    #####:  195:	    return static_cast<_Tp*>(::operator new(__n));
    %%%%%:  195-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  195-block  1
    %%%%%:  195-block  2
call    3 never executed
    %%%%%:  195-block  3
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  195-block  4
    %%%%%:  195-block  5
call    7 never executed
    %%%%%:  195-block  6
call    8 never executed
    %%%%%:  195-block  7
call    9 never executed
    %%%%%:  195-block  8
call   10 never executed
    %%%%%:  195-block  9
call   11 never executed
    %%%%%:  195-block 10
call   12 never executed
    %%%%%:  195-block 11
call   13 never executed
    %%%%%:  195-block 12
call   14 never executed
    %%%%%:  195-block 13
call   15 never executed
    %%%%%:  195-block 14
call   16 never executed
    %%%%%:  195-block 15
call   17 never executed
    %%%%%:  195-block 16
call   18 never executed
    %%%%%:  195-block 17
call   19 never executed
    %%%%%:  195-block 18
call   20 never executed
    %%%%%:  195-block 19
call   21 never executed
    %%%%%:  195-block 20
call   22 never executed
    %%%%%:  195-block 21
call   23 never executed
    %%%%%:  195-block 22
call   24 never executed
    %%%%%:  195-block 23
call   25 never executed
    %%%%%:  195-block 24
call   26 never executed
    %%%%%:  195-block 25
call   27 never executed
    %%%%%:  195-block 26
call   28 never executed
    %%%%%:  195-block 27
call   29 never executed
    %%%%%:  195-block 28
call   30 never executed
    %%%%%:  195-block 29
call   31 never executed
branch 32 never executed (fallthrough)
branch 33 never executed (throw)
    %%%%%:  195-block 30
    %%%%%:  195-block 31
call   34 never executed
        -:  196:	  }
        -:  197:
      30*:  198:	return __allocator_base<_Tp>::allocate(__n, 0);
    %%%%%:  198-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  198-block  1
    %%%%%:  198-block  2
call    3 never executed
        1:  198-block  3
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  198-block  4
    %%%%%:  198-block  5
call    7 never executed
        1:  198-block  6
call    8 returned 1
    %%%%%:  198-block  7
call    9 never executed
    %%%%%:  198-block  8
call   10 never executed
    %%%%%:  198-block  9
call   11 never executed
    %%%%%:  198-block 10
call   12 never executed
        6:  198-block 11
call   13 returned 6
    %%%%%:  198-block 12
call   14 never executed
    %%%%%:  198-block 13
call   15 never executed
    %%%%%:  198-block 14
call   16 never executed
    %%%%%:  198-block 15
call   17 never executed
    %%%%%:  198-block 16
call   18 never executed
        1:  198-block 17
call   19 returned 1
    %%%%%:  198-block 18
call   20 never executed
    %%%%%:  198-block 19
call   21 never executed
        1:  198-block 20
call   22 returned 1
        5:  198-block 21
call   23 returned 5
    %%%%%:  198-block 22
call   24 never executed
    %%%%%:  198-block 23
call   25 never executed
    %%%%%:  198-block 24
call   26 never executed
    %%%%%:  198-block 25
call   27 never executed
    %%%%%:  198-block 26
call   28 never executed
    %%%%%:  198-block 27
call   29 never executed
       15:  198-block 28
call   30 returned 15
    %%%%%:  198-block 29
call   31 never executed
branch 32 never executed (fallthrough)
branch 33 never executed (throw)
    %%%%%:  198-block 30
    %%%%%:  198-block 31
call   34 never executed
        -:  199:      }
        -:  200:
        -:  201:      [[__gnu__::__always_inline__]]
        -:  202:      constexpr void
        -:  203:      deallocate(_Tp* __p, size_t __n)
        -:  204:      {
      22*:  205:	if (std::__is_constant_evaluated())
    $$$$$:  205-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$:  205-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed
    %%%%%:  205-block  2
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed
    %%%%%:  205-block  3
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed
    %%%%%:  205-block  4
call   27 never executed
branch 28 never executed (fallthrough)
branch 29 never executed
call   30 never executed
branch 31 never executed (fallthrough)
branch 32 never executed
call   33 never executed
branch 34 never executed (fallthrough)
branch 35 never executed
call   36 never executed
branch 37 never executed (fallthrough)
branch 38 never executed
    %%%%%:  205-block  5
call   39 never executed
branch 40 never executed (fallthrough)
branch 41 never executed
    %%%%%:  205-block  6
call   42 never executed
branch 43 never executed (fallthrough)
branch 44 never executed
    %%%%%:  205-block  7
call   45 never executed
branch 46 never executed (fallthrough)
branch 47 never executed
    %%%%%:  205-block  8
call   48 never executed
branch 49 never executed (fallthrough)
branch 50 never executed
    %%%%%:  205-block  9
call   51 never executed
branch 52 never executed (fallthrough)
branch 53 never executed
    %%%%%:  205-block 10
call   54 never executed
branch 55 never executed (fallthrough)
branch 56 never executed
call   57 never executed
branch 58 never executed (fallthrough)
branch 59 never executed
call   60 never executed
branch 61 never executed (fallthrough)
branch 62 never executed
    %%%%%:  205-block 11
call   63 never executed
branch 64 never executed (fallthrough)
branch 65 never executed
    %%%%%:  205-block 12
call   66 never executed
branch 67 never executed (fallthrough)
branch 68 never executed
    %%%%%:  205-block 13
call   69 never executed
branch 70 never executed (fallthrough)
branch 71 never executed
    %%%%%:  205-block 14
call   72 never executed
branch 73 never executed (fallthrough)
branch 74 never executed
        4:  205-block 15
call   75 returned 4
branch 76 taken 0 (fallthrough)
branch 77 taken 4
        4:  205-block 16
call   78 returned 4
branch 79 taken 0 (fallthrough)
branch 80 taken 4
    %%%%%:  205-block 17
call   81 never executed
branch 82 never executed (fallthrough)
branch 83 never executed
    %%%%%:  205-block 18
call   84 never executed
branch 85 never executed (fallthrough)
branch 86 never executed
    %%%%%:  205-block 19
call   87 never executed
branch 88 never executed (fallthrough)
branch 89 never executed
    %%%%%:  205-block 20
call   90 never executed
branch 91 never executed (fallthrough)
branch 92 never executed
    %%%%%:  205-block 21
call   93 never executed
branch 94 never executed (fallthrough)
branch 95 never executed
       14:  205-block 22
call   96 returned 14
branch 97 taken 0 (fallthrough)
branch 98 taken 14
call   99 never executed
branch 100 never executed (fallthrough)
branch 101 never executed
        -:  206:	  {
    #####:  207:	    ::operator delete(__p);
    $$$$$:  207-block  0
call    0 never executed
    $$$$$:  207-block  1
call    1 never executed
    %%%%%:  207-block  2
call    2 never executed
    %%%%%:  207-block  3
call    3 never executed
    %%%%%:  207-block  4
call    4 never executed
    %%%%%:  207-block  5
call    5 never executed
    %%%%%:  207-block  6
call    6 never executed
    %%%%%:  207-block  7
call    7 never executed
    %%%%%:  207-block  8
call    8 never executed
    %%%%%:  207-block  9
call    9 never executed
    %%%%%:  207-block 10
call   10 never executed
    %%%%%:  207-block 11
call   11 never executed
    %%%%%:  207-block 12
call   12 never executed
    %%%%%:  207-block 13
call   13 never executed
    %%%%%:  207-block 14
call   14 never executed
    %%%%%:  207-block 15
call   15 never executed
    %%%%%:  207-block 16
call   16 never executed
    %%%%%:  207-block 17
call   17 never executed
    %%%%%:  207-block 18
call   18 never executed
    %%%%%:  207-block 19
call   19 never executed
    %%%%%:  207-block 20
call   20 never executed
    %%%%%:  207-block 21
call   21 never executed
    %%%%%:  207-block 22
call   22 never executed
    %%%%%:  207-block 23
call   23 never executed
    %%%%%:  207-block 24
call   24 never executed
    %%%%%:  207-block 25
call   25 never executed
    %%%%%:  207-block 26
call   26 never executed
    %%%%%:  207-block 27
call   27 never executed
    %%%%%:  207-block 28
call   28 never executed
    %%%%%:  207-block 29
call   29 never executed
    %%%%%:  207-block 30
call   30 never executed
    %%%%%:  207-block 31
call   31 never executed
    %%%%%:  207-block 32
call   32 never executed
    %%%%%:  207-block 33
call   33 never executed
    #####:  208:	    return;
        -:  209:	  }
      22*:  210:	__allocator_base<_Tp>::deallocate(__p, __n);
    $$$$$:  210-block  0
call    0 never executed
    $$$$$:  210-block  1
call    1 never executed
    %%%%%:  210-block  2
call    2 never executed
    %%%%%:  210-block  3
call    3 never executed
    %%%%%:  210-block  4
call    4 never executed
    %%%%%:  210-block  5
call    5 never executed
    %%%%%:  210-block  6
call    6 never executed
    %%%%%:  210-block  7
call    7 never executed
    %%%%%:  210-block  8
call    8 never executed
    %%%%%:  210-block  9
call    9 never executed
    %%%%%:  210-block 10
call   10 never executed
    %%%%%:  210-block 11
call   11 never executed
    %%%%%:  210-block 12
call   12 never executed
    %%%%%:  210-block 13
call   13 never executed
    %%%%%:  210-block 14
call   14 never executed
    %%%%%:  210-block 15
call   15 never executed
    %%%%%:  210-block 16
call   16 never executed
    %%%%%:  210-block 17
call   17 never executed
    %%%%%:  210-block 18
call   18 never executed
    %%%%%:  210-block 19
call   19 never executed
    %%%%%:  210-block 20
call   20 never executed
    %%%%%:  210-block 21
call   21 never executed
    %%%%%:  210-block 22
call   22 never executed
    %%%%%:  210-block 23
call   23 never executed
    %%%%%:  210-block 24
call   24 never executed
        4:  210-block 25
call   25 returned 4
        4:  210-block 26
call   26 returned 4
    %%%%%:  210-block 27
call   27 never executed
    %%%%%:  210-block 28
call   28 never executed
    %%%%%:  210-block 29
call   29 never executed
    %%%%%:  210-block 30
call   30 never executed
    %%%%%:  210-block 31
call   31 never executed
       14:  210-block 32
call   32 returned 14
    %%%%%:  210-block 33
call   33 never executed
        -:  211:      }
        -:  212:#endif // C++20
        -:  213:
        -:  214:      friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
        -:  215:      bool
        -:  216:      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
    #####:  217:      { return true; }
        -:  218:
        -:  219:#if __cpp_impl_three_way_comparison < 201907L
        -:  220:      friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
        -:  221:      bool
        -:  222:      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
        -:  223:      { return false; }
        -:  224:#endif
        -:  225:
        -:  226:      // Inherit everything else.
        -:  227:    };
        -:  228:
        -:  229:  /** Equality comparison for std::allocator objects
        -:  230:   *
        -:  231:   * @return true, for all std::allocator objects.
        -:  232:   * @relates std::allocator
        -:  233:   */
        -:  234:  template<typename _T1, typename _T2>
        -:  235:    __attribute__((__always_inline__))
        -:  236:    inline _GLIBCXX20_CONSTEXPR bool
        -:  237:    operator==(const allocator<_T1>&, const allocator<_T2>&)
        -:  238:    _GLIBCXX_NOTHROW
        -:  239:    { return true; }
        -:  240:
        -:  241:#if __cpp_impl_three_way_comparison < 201907L
        -:  242:  template<typename _T1, typename _T2>
        -:  243:    __attribute__((__always_inline__))
        -:  244:    inline _GLIBCXX20_CONSTEXPR bool
        -:  245:    operator!=(const allocator<_T1>&, const allocator<_T2>&)
        -:  246:    _GLIBCXX_NOTHROW
        -:  247:    { return false; }
        -:  248:#endif
        -:  249:
        -:  250:  /// @cond undocumented
        -:  251:
        -:  252:  // Invalid allocator<cv T> partial specializations.
        -:  253:  // allocator_traits::rebind_alloc can be used to form a valid allocator type.
        -:  254:  template<typename _Tp>
        -:  255:    class allocator<const _Tp>
        -:  256:    {
        -:  257:    public:
        -:  258:      typedef _Tp value_type;
        -:  259:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  260:    };
        -:  261:
        -:  262:  template<typename _Tp>
        -:  263:    class allocator<volatile _Tp>
        -:  264:    {
        -:  265:    public:
        -:  266:      typedef _Tp value_type;
        -:  267:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  268:    };
        -:  269:
        -:  270:  template<typename _Tp>
        -:  271:    class allocator<const volatile _Tp>
        -:  272:    {
        -:  273:    public:
        -:  274:      typedef _Tp value_type;
        -:  275:      template<typename _Up> allocator(const allocator<_Up>&) { }
        -:  276:    };
        -:  277:  /// @endcond
        -:  278:
        -:  279:  /// @} group allocator
        -:  280:
        -:  281:  // Inhibit implicit instantiations for required instantiations,
        -:  282:  // which are defined via explicit instantiations elsewhere.
        -:  283:#if _GLIBCXX_EXTERN_TEMPLATE
        -:  284:  extern template class allocator<char>;
        -:  285:  extern template class allocator<wchar_t>;
        -:  286:#endif
        -:  287:
        -:  288:  // Undefine.
        -:  289:#undef __allocator_base
        -:  290:
        -:  291:_GLIBCXX_END_NAMESPACE_VERSION
        -:  292:} // namespace std
        -:  293:
        -:  294:#endif
